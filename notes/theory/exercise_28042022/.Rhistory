set_engine("kknn")
knn_fit <- knn_spec %>%
fit(Purchase ~ ., data=Caravan_tr)
augmented_ts <- augment(knn_fit, new_data=Caravan_ts)
augmented_ts %>%
conf_mat(truth=Purchase, estimate=.pred_class)
augmented_ts %>%
precision(truth=Purchase, estimate=.pred_class, event_level="second")
knn_spec <- nearest_neighbor(neighbors=7) %>%
set_mode("classification") %>%
set_engine("kknn")
knn_fit <- knn_spec %>%
fit(Purchase ~ ., data=Caravan_tr)
augmented_ts <- augment(knn_fit, new_data=Caravan_ts)
augmented_ts %>%
conf_mat(truth=Purchase, estimate=.pred_class)
augmented_ts %>%
precision(truth=Purchase, estimate=.pred_class, event_level="second")
knn_spec <- nearest_neighbor(neighbors=11) %>%
set_mode("classification") %>%
set_engine("kknn")
knn_fit <- knn_spec %>%
fit(Purchase ~ ., data=Caravan_tr)
augmented_ts <- augment(knn_fit, new_data=Caravan_ts)
augmented_ts %>%
conf_mat(truth=Purchase, estimate=.pred_class)
augmented_ts %>%
precision(truth=Purchase, estimate=.pred_class, event_level="second")
knn_spec <- nearest_neighbor(neighbors=11) %>%
set_mode("classification") %>%
set_engine("kknn")
knn_fit <- knn_spec %>%
fit(Purchase ~ ., data=Caravan_tr)
augmented_ts <- augment(knn_fit, new_data=Caravan_ts)
augmented_ts %>%
conf_mat(truth=Purchase, estimate=.pred_class)
augmented_ts %>%
precision(truth=Purchase, estimate=.pred_class, event_level="second")
install.packages("BiocManager")
BiocManager::install("GEOquery")
install.packages(c("commonmark", "rlang", "xfun"))
install.packages(c("commonmark", "rlang", "xfun"))
install.packages(c("commonmark", "rlang", "xfun"))
install.packages(c("commonmark", "rlang", "xfun"))
install.packages(c("commonmark", "rlang", "xfun"))
install.packages(c("commonmark", "rlang", "xfun"))
install.packages(c("commonmark", "rlang", "xfun"))
set.seed(123)
x <- rnorm(100, 0, 2)
x
beta0 <- 1
beta1 <- 2
eta <- beta0 + beta1*x
eta
poisson(eta)
mu <- exp(eta)
mu
y <- rpois(100, mu)
y
plot(y)
y[1:10]
plot(x,y)
x
plot(x, log(y))
abline(x, log(y))
z = log(y)
abline(z)
summary(z)
z <- log(y+1)
z
summary(z)
modA <- lm(formula = z~x)
modA
summary(modA) #a linear modle with a series of parameters. The p-values are on the right.
plot(modA)
modB <- lm(formula = z~x + I(x^2))
modB
summary(modB)
plot(modB)
hist(modB)
hist(modB)
hist(y)
# negative binomials are usually used for biological data
modC <- glm(formula=y~x, family = Poisson)
# negative binomials are usually used for biological data
modC <- glm(formula=y~x, family = "poisson")
plot(modC)
summary(modC)
# Number of fisher Scoring iterations, start from a value of beta and changes it a number of times
plot(modC)
pl <- predict(modC)
summary(pl)
#it does beta0hat + beta1hat*x
eta.fitted <- coefficients(modC)[1] + coefficients(modC)[2]*x
eta.fitted[1:10]
p1 <- predict(modC) #predict the linear predictor
summary(p1)
plot(p1, log(y))
abline(0,1)
p2 <- predict(modC, type = "response")
p2[1:10]
exp(eta.fitted)[1:10]
mu <- exp(eta)/(1+exp(eta))
mu
summary(mu)
plot(eta, mu)
plot(x, mu)
y <- rbinom(100, size = 1, prob = mu)
table(y)
modD <- glm(y~x, family = "binomial")
modD <- glm(y~x, family = binomial(link = "logit")) #binomial can be used as a function
str(res)
res <- binomial(link = "logit")
str(res)
plot(res$linkfun, from=0.001, to=0.999)
plot(res$linkfun, from=5, to=5)
plot(res$variance, from=0.001, to=0.999)
p4 <- predict(modD)
summary(p4) #gives eta values
summary(p5)
p5 <- predict(modD, type="response")
summary(p5)
set.seed(123)
install.packages("BiocManager")
BiocManager::install("GEOquery")
library("GEOquery")
# load data
gse<- getGEO("GSE28489") # miRNA expression profiling of human immune cell subsets (HUG)
# gse<- getGEO("GSE28489“, destdir = “.”, getGPL = FALSE)
gse <- gse[[1]]
# inspect matrix of expression values
ex <- exprs(gse)
dim(ex)
colnames(ex)
View(ex)
library("GEOquery")
# load data
gse<- getGEO("GSE28489") # Get a specific Geo entry, it accesses the GEO database and unpacks the data
View(gse)
View(gse)
# gse<- getGEO("GSE28489“, destdir = “.”, getGPL = FALSE)
gse <- gse[1]
gse
# load data
gse<- getGEO("GSE28489") # Get a specific Geo entry, it accesses the GEO database and unpacks the data
# gse<- getGEO("GSE28489“, destdir = “.”, getGPL = FALSE)
gse <- gse[[1]]
gse
# gse<- getGEO("GSE28489“, destdir = “.”, getGPL = FALSE)
gse <- gse[[1]]
gse
# load data
gse<- getGEO("GSE28489") # Get a specific Geo entry, it accesses the GEO database and unpacks the data
# gse<- getGEO("GSE28489“, destdir = “.”, getGPL = FALSE)
gse <- gse[[1]]
gse
View(gse)
View(gse@phenoData@data)
gse$title
head(gse)
head(gse$title)
ex <- exprs(gse) #matrix of values, specialized function
View(ex)
pheno <- phenoData(gse)
pheno
dim(gse)
dim(ex)
View(ex)
colnames(ex)
# analyze value distributions
boxplot(ex)
ex2 <- log2(ex) #transform the data
boxplot(ex2)
ex2
dim(ex2)
ex2 <- na.omit(as.matrix(ex2))
# removes all the rows with NA values.
dim(ex2)
# PCA
pca <- prcomp(t(ex2))
summary(pca)
pca
summary(pca)
plot(pca)
screeplot(pca)
# draw PCA plot
grpcol <- c(rep("blue",5), rep("red",5), rep("green",5), rep("yellow",5) , rep("pink",3), rep("purple",5), rep("orange",5) )
plot(pca$x[,1], pca$x[,2], xlab="PCA1", ylab="PCA2", main="PCA for components 1&2", type="p", pch=10, col=grpcol)
View(pca)
text(pca$x[,1], pca$x[,2], rownames(pca$data), cex=0.75)
install.packages(curatedMetagenomicsData)
BiocManager::install("curatedMetagenomicData")
# Simulate the data
set.seed(123)  # In order to get repeatable results
x <- rnorm(100, 0, 2)  # Does not matter, just to get random values following a normal distribution with 0 mean and 2 standard deviation
beta0 <- 1  # Fixed
beta1 <- 2  # Fixed
eta <- beta0 + beta1 * x  # Vector of values, linear predictor calculated for each x value
mu <- exp(eta)  # Because we chose the canonical link
y <- rpois(100, lambda=mu)  # Y values corresponding to random X values
# Simulate the data
set.seed(123)
set.seed(123)  # In order to get repeatable results
x <- rnorm(100, 0, 2)  # Does not matter, just to get random values following a normal distribution with 0 mean and 2 standard deviation
beta0 <- 1  # Fixed
beta1 <- 2  # Fixed
eta <- beta0 + beta1 * x  # Vector of values, linear predictor calculated for each x value
mu <- exp(eta)  # Because we chose the canonical link
y <- rpois(100, lambda=mu)  # Y values corresponding to random X values
# Simulate the data
set.seed(123)  # In order to get repeatable results
x <- rnorm(100, 0, 2)  # Does not matter, just to get random values following a normal distribution with 0 mean and 2 standard deviation
beta0 <- 1  # Fixed
beta1 <- 2  # Fixed
eta <- beta0 + beta1 * x  # Vector of values, linear predictor calculated for each x value
mu <- exp(eta)  # Because we chose the canonical link
y <- rpois(100, lambda=mu)  # Y values corresponding to random X values
plot(x, y)  # See that is not linear, could be log(y)?
plot(x, y)  # See that is not linear, could be log(y)?
plot(x, y)  # See that is not linear, could be log(y)?
plot(x, log(y))  # Since we obtain a line, we expect eta = beta0 + beta1x
plot(x, log(y))  # Since we obtain a line, we expect eta = beta0 + beta1x
# Try fitting linear model (not the best approach)
z <- log(y)  # Not good since you have many zeros and infinites, typical Poisson data contain several 0s
summary(z)
z <- log(y+1)  # Sudo-count transformation (commonly used)
summary(z)
modA <- lm(formula=z~x)  # Fit model
summary(modA)  # Estimated parameters are far from chosen ones
plot(modA)  # Notice systematic trends in residual analysis: it is suggested the presence of a quadratic term in X. From the Residual s Leverage plot it seems that there is a systematic trend, while instead they should distribute above and below
# Note: I(math_exp) is used to interpret the content as a mathematic expression
summary(modB)  # Not that far from starting data
plot(modB)  # Not the best but seems decent
modB <- lm(z~x+I(x^2))  # Try adding quadratic term to match residual analysis
# Note: I(math_exp) is used to interpret the content as a mathematic expression
summary(modB)  # Not that far from starting data
plot(modB)  # Not the best but seems decent
y[1:100]  # Inspect the data and notice that the response in positive discrete
# Proper way to try and fit data
y[1:100]  # Inspect the data and notice that the response in positive discrete
# You could then try fitting different distributions based on that, ...
# ... Poisson seems reasonable, which is the simplest to fit this kind of data. Negative binomiala is another option, that we will not consider in this case
modC <- glm(formula=y~x, family="poisson")  # Canonical link by default
# Proper way to try and fit data
y[1:100]  # Inspect the data and notice that the response in positive discrete
# You could then try fitting different distributions based on that, ...
# ... Poisson seems reasonable, which is the simplest to fit this kind of data. Negative binomiala is another option, that we will not consider in this case
modC <- glm(formula=y~x, family="poisson")  # Canonical link by default
# Note: Because of how glm works, you need decently big values for n. In linear regression models the beta hat vector has a gaussian distribution, because there is an assumpion of gaussianity in the model. In the case of other regression models, as the poisson regression, gaussianity is not respected if n is not large.
# Note: Fisher Scoring gives info on optimization attempts number
plot(modC)  # Seems decent
# Use model to make predictions
p1<-predict(modC)  # ! Estimates linear predictors, not values of y
summary(p1)
pl[1:10]
summary(p1)
pl[1:10]
p1[1:10]
coefficients(modC)
coefficients(modC)[1]
coefficients(modC)[1] + coefficients(modC)[2] * x
p2<-predict(modC,type="response")  # Estimates values of y
summary(p2)
plot(p2,y)  # Plot predicted vs simulated values of y
abline(0,1)  # Line that should be approximated by the datapoints
install.packages(SPIAssay)
install.packages("SPIAssay")
SPIAssay
library(SPIAssay)
rm(list=ls());verbose<-TRUE; options(max.print=1000);getOption("max.print")
rm(list=ls());verbose<-TRUE; options(max.print=1000);getOption("max.print")
# install.packages("SPIAssay")
## set working dir
# setwd("../Esercitazione_SPIA/"); getwd();
library(SPIAssay)
## set param for high MAF SNPs
spia_parameters <- list(Pmm = 0.1, nsigma = 2, Pmm_nonM = 0.6, nsigma_nonM = 3, PercValidCall=0.7)
## load genotype data
genotype_data <- read.table("SPIA_input_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
dim(genotype_data); head(genotype_data);
## load high MAF SNPs unique IDs
selected_snps <- read.delim("SPIA_selected_SNPs.txt", header = FALSE, sep = "\t", stringsAsFactors = FALSE)[,1]
length(selected_snps); head(selected_snps);
##TASK 1
## select genotype data based on SNP IDs
genotype_data_selected <- genotype_data[selected_snps,]
dim(genotype_data_selected);
## run test
SPIA_selected <-  SPIATest(x = genotype_data_selected, row.names = FALSE, test.param = spia_parameters)
## visualize distances
SPIAPlot(SPIA_selected)
## check output matrix
head(SPIA_selected["SPIAresult"]);
##look at distances histogram
hist(as.numeric(SPIA_selected$SPIAresult[,3]),breaks = 100,xlim=c(0,1))
## save output matrix
write.table(SPIA_selected["SPIAresult"],paste("output_","selected",".txt",sep=""),sep="\t",quote=FALSE,row.names=FALSE)
##subsampling of high MAF SNPs: 100
c100<-sample(c(1:nrow(genotype_data_selected)),100,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c100,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
## ...
##subsampling of high MAF SNPs, 100, 80, ...
## ...
##TASK 2
SPIA_all <-  SPIATest(x = genotype_data, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_all)
c100<-sample(c(1:nrow(genotype_data)),100,replace = FALSE);
genotype_data_random <- genotype_data[c100,]
SPIA_random <-  SPIATest(x = genotype_data_random, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_random)
hist(as.numeric(SPIA_random$SPIAresult[,3]),breaks = 100,xlim=c(0,1))
##TASK 3
## load somatic data
somatic_data <- read.table("SPIA_somatic_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
dim(somatic_data); head(somatic_data);
SPIA_somatic <-  SPIATest(x = somatic_data, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_somatic)
# look at SPIAresult
write.table(SPIA_somatic["SPIAresult"],paste("output_","somatic",".txt",sep=""),sep="\t",quote=FALSE,row.names=FALSE)
##TASK 4
## chnage parameters
## set param for high MAF SNPs, exploring different values for Pmm, Pmm_nonM, nsigma, nsigma_nonM (one at the time)
spia_parameters <- list(Pmm = 0.2, nsigma = 2, Pmm_nonM = 0.6, nsigma_nonM = 3, PercValidCall=0.7)
# ...
rm(list=ls());verbose<-TRUE; options(max.print=1000);getOption("max.print")
# install.packages("SPIAssay")
## set working dir
# setwd("../Esercitazione_SPIA/"); getwd();
library(SPIAssay)
## set param for high MAF SNPs
spia_parameters <- list(Pmm = 0.1, nsigma = 2, Pmm_nonM = 0.6, nsigma_nonM = 3, PercValidCall=0.7)
## load genotype data
genotype_data <- read.table("SPIA_input_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
dim(genotype_data); head(genotype_data);
## load high MAF SNPs unique IDs
selected_snps <- read.delim("SPIA_selected_SNPs.txt", header = FALSE, sep = "\t", stringsAsFactors = FALSE)[,1]
length(selected_snps); head(selected_snps);
##TASK 1
## select genotype data based on SNP IDs
genotype_data_selected <- genotype_data[selected_snps,]
dim(genotype_data_selected);
## run test
SPIA_selected <-  SPIATest(x = genotype_data_selected, row.names = FALSE, test.param = spia_parameters)
## visualize distances
SPIAPlot(SPIA_selected)
## check output matrix
head(SPIA_selected["SPIAresult"]);
##look at distances histogram
hist(as.numeric(SPIA_selected$SPIAresult[,3]),breaks = 100,xlim=c(0,1))
## save output matrix
write.table(SPIA_selected["SPIAresult"],paste("output_","selected",".txt",sep=""),sep="\t",quote=FALSE,row.names=FALSE)
##subsampling of high MAF SNPs: 100
c100<-sample(c(1:nrow(genotype_data_selected)),100,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c100,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
## ...
##subsampling of high MAF SNPs, 100, 80, ...
## ...
##TASK 2
SPIA_all <-  SPIATest(x = genotype_data, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_all)
c100<-sample(c(1:nrow(genotype_data)),100,replace = FALSE);
genotype_data_random <- genotype_data[c100,]
SPIA_random <-  SPIATest(x = genotype_data_random, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_random)
hist(as.numeric(SPIA_random$SPIAresult[,3]),breaks = 100,xlim=c(0,1))
##TASK 3
## load somatic data
somatic_data <- read.table("SPIA_somatic_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
dim(somatic_data); head(somatic_data);
SPIA_somatic <-  SPIATest(x = somatic_data, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_somatic)
# look at SPIAresult
write.table(SPIA_somatic["SPIAresult"],paste("output_","somatic",".txt",sep=""),sep="\t",quote=FALSE,row.names=FALSE)
##TASK 4
## chnage parameters
## set param for high MAF SNPs, exploring different values for Pmm, Pmm_nonM, nsigma, nsigma_nonM (one at the time)
spia_parameters <- list(Pmm = 0.2, nsigma = 2, Pmm_nonM = 0.6, nsigma_nonM = 3, PercValidCall=0.7)
# ...
# install.packages("SPIAssay")
## set working dir
getwd()
# install.packages("SPIAssay")
## set working dir
setwd("C:/Users/Maurizio/Desktop/HumanGenomics/notes/exercise_28042022"); getwd();
library(SPIAssay)
## set param for high MAF SNPs
spia_parameters <- list(Pmm = 0.1, nsigma = 2, Pmm_nonM = 0.6, nsigma_nonM = 3, PercValidCall=0.7)
## load genotype data
genotype_data <- read.table("SPIA_input_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
dim(genotype_data); head(genotype_data);
## load high MAF SNPs unique IDs
selected_snps <- read.delim("SPIA_selected_SNPs.txt", header = FALSE, sep = "\t", stringsAsFactors = FALSE)[,1]
length(selected_snps); head(selected_snps);
selected_snps
##TASK 1
## select genotype data based on SNP IDs
genotype_data_selected <- genotype_data[selected_snps,]
dim(genotype_data_selected);
genotype_data_selected
## run test
SPIA_selected <-  SPIATest(x = genotype_data_selected, row.names = FALSE, test.param = spia_parameters)
## visualize distances
SPIAPlot(SPIA_selected)
## check output matrix
head(SPIA_selected["SPIAresult"]);
##look at distances histogram
hist(as.numeric(SPIA_selected$SPIAresult[,3]),breaks = 100,xlim=c(0,1))
## save output matrix
write.table(SPIA_selected["SPIAresult"],paste("output_","selected",".txt",sep=""),sep="\t",quote=FALSE,row.names=FALSE)
## run test
SPIA_selected <-  SPIATest(x = genotype_data_selected, row.names = FALSE, test.param = spia_parameters)
## visualize distances
SPIAPlot(SPIA_selected)
## check output matrix
head(SPIA_selected["SPIAresult"]);
##look at distances histogram
hist(as.numeric(SPIA_selected$SPIAresult[,3]),breaks = 100,xlim=c(0,1))
## load high MAF SNPs unique IDs
selected_snps <- read.delim("SPIA_selected_SNPs.txt", header = FALSE, sep = "\t", stringsAsFactors = FALSE)[,1]
selected_snps
dim(genotype_data) - dim(selected_snps)
## load high MAF SNPs unique IDs
selected_snps <- read.delim("SPIA_selected_SNPs.txt", header = FALSE, sep = "\t", stringsAsFactors = FALSE)[,1]
dim(genotype_data); head(genotype_data);
dim(genotype_data); head(genotype_data);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c20,], row.names = FALSE, test.param = spia_parameters)
c20<-sample(c(1:nrow(genotype_data_selected)),20,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c20,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
##subsampling of high MAF SNPs: 100
c100<-sample(c(1:nrow(genotype_data_selected)),100,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c20,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
##subsampling of high MAF SNPs: 100
c100<-sample(c(1:nrow(genotype_data_selected)),100,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c20,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
SPIA_selected <-  SPIATest(x = genotype_data_selected[c100,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
##subsampling of high MAF SNPs, 100, 80, ...
c80 <- sample(c(1:nrow(genotype_data_selected)),80,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c80,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
c60 <- sample(c(1:nrow(genotype_data_selected)),80,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c60,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
c40 <- sample(c(1:nrow(genotype_data_selected)),80,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c40,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
c20 <- sample(c(1:nrow(genotype_data_selected)),80,replace = FALSE);
SPIA_selected <-  SPIATest(x = genotype_data_selected[c20,], row.names = FALSE, test.param = spia_parameters)
SPIAPlot(SPIA_selected)
##TASK 2
SPIA_all <-  SPIATest(x = genotype_data, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_all)
c100<-sample(c(1:nrow(genotype_data)),100,replace = FALSE);
genotype_data_random <- genotype_data[c100,]
genotype_data_random <- genotype_data[c100,]
SPIA_random <-  SPIATest(x = genotype_data_random, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_random)
hist(as.numeric(SPIA_random$SPIAresult[,3]),breaks = 100,xlim=c(0,1))
##TASK 3
## load somatic data
somatic_data <- read.table("SPIA_somatic_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
##TASK 3
## load somatic data
somatic_data <- read.table("SPIA_somatic_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
dim(somatic_data); head(somatic_data);
SPIA_somatic <-  SPIATest(x = somatic_data, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_somatic)
# look at SPIAresult
write.table(SPIA_somatic["SPIAresult"],paste("output_","somatic",".txt",sep=""),sep="\t",quote=FALSE,row.names=FALSE)
c("SNP1", "AA", "AA", "AB", "AB"),
c("SNP2", "NoCall", "AA", "AB", "AB"),
c("SNP3", "AB", "AB", "AA" , "AB"),
c("SNP4", "BB", "BB", "BB", "BB"),
c("SNP5", "AB", "BB", "AA", "AA"))
colnames(GenotypeCalls) <-
c("SNP_ID","CellLine1","CellLine2","CellLine3","CellLine4")
c("SNP1", "AA", "AA", "AB", "AB"),
c("SNP2", "NoCall", "AA", "AB", "AB"),
c("SNP3", "AB", "AB", "AA" , "AB"),
c("SNP4", "BB", "BB", "BB", "BB"),
c("SNP5", "AB", "BB", "AA", "AA"))
colnames(GenotypeCalls) <-
c("SNP_ID","CellLine1
View(GenotypeCalls)
view(GenotypeCalls)
View(GenotypeCalls)
somatic_data <- read.table("SPIA_somatic_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
dim(somatic_data); head(somatic_data);
SPIA_somatic <-  SPIATest(x = somatic_data, row.names = F, test.param = spia_parameters)
SPIAPlot(SPIA_somatic)
# look at SPIAresult
write.table(SPIA_somatic["SPIAresult"],paste("output_","somatic",".txt",sep=""),sep="\t",quote=FALSE,row.names=FALSE)
omatic_data <- read.table("SPIA_somatic_genotype.tsv", header = TRUE, sep = "\t", as.is = TRUE );
pwd
pwd()
cwd()
cwd
getwd()
cd
dir
read.table("output_somatic.txt")
table_somatic <- read.table("output_somatic.txt")
View(table_somatic)
table_somatic <- read.table("output_somatic.txt", header = True)
View(table_somatic)
table_somatic <- read.table("output_somatic.txt", header = TRUE)
View(table_somatic)
